// <auto-generated />
using System;
using EcommerceSystem.DAL.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceSystem.DAL.Migrations
{
    [DbContext(typeof(EcommerceContext))]
    [Migration("20240521005724_AddOrderIdToOrderItem")]
    partial class AddOrderIdToOrderItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sports & Outdoors"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Books & Audible"
                        });
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Premium ultrabook with Intel Core i7 processor, 16GB RAM, 512GB SSD, and 13.3-inch InfinityEdge display.",
                            Name = "Dell XPS 13",
                            Price = 1499.99,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Business-class laptop with Intel Core i5 processor, 8GB RAM, 256GB SSD, and 14-inch FHD display.",
                            Name = "Lenovo ThinkPad X1 Carbon",
                            Price = 1299.99,
                            Quantity = 15
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Flagship smartphone with 6.8-inch AMOLED display, Snapdragon 888 processor, 12GB RAM, 128GB storage, and quad rear cameras.",
                            Name = "Samsung Galaxy S21 Ultra",
                            Price = 1199.99,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Premium wireless headphones with industry-leading noise cancellation, 30-hour battery life, and touch sensor controls.",
                            Name = "Sony WH-1000XM4 Wireless Headphones",
                            Price = 349.99000000000001,
                            Quantity = 25
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Advanced smartwatch with always-on Retina display, blood oxygen sensor, ECG app, and built-in GPS.",
                            Name = "Apple Watch Series 7",
                            Price = 399.99000000000001,
                            Quantity = 30
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "Nike Dri-FIT moisture-wicking polo shirt with ribbed collar and three-button placket. Available in various colors and sizes.",
                            Name = "Nike Men's Dri-FIT Polo Shirt",
                            Price = 39.990000000000002,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "Adidas Ultraboost running shoes with Primeknit upper and responsive Boost midsole. Designed specifically for women's fit.",
                            Name = "Adidas Women's Ultraboost Running Shoes",
                            Price = 169.99000000000001,
                            Quantity = 45
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Description = "Waterproof and breathable jacket with seam-sealed DryVent 2L shell. Features adjustable hood, hem cinch-cord, and zippered hand pockets.",
                            Name = "The North Face Men's Resolve 2 Jacket",
                            Price = 89.989999999999995,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Description = "Levi's high rise skinny jeans with stretch denim construction and slim fit through hips and thighs. Available in various washes.",
                            Name = "Levi's Women's High Rise Skinny Jeans",
                            Price = 59.990000000000002,
                            Quantity = 55
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Description = "Under Armour Tech 2.0 short sleeve t-shirt with UA Tech fabric for quick-drying and ultra-soft comfort. Available in assorted colors.",
                            Name = "Under Armour Men's Tech 2.0 Short Sleeve T-Shirt",
                            Price = 24.989999999999998,
                            Quantity = 60
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            Description = "Premium cooler with rotomolded construction for durability and superior ice retention. Features PermaFrost insulation and FatWall design.",
                            Name = "Yeti Tundra 45 Cooler",
                            Price = 299.99000000000001,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Description = "Osprey Atmos AG 65 backpack with Anti-Gravity suspension system for comfort and ventilation. Features adjustable harness and fit-on-the-fly hipbelt.",
                            Name = "Osprey Packs Atmos AG 65 Backpack",
                            Price = 289.94999999999999,
                            Quantity = 25
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            Description = "Double-wall vacuum insulated tumbler with stainless steel construction. Keeps drinks hot or cold for hours. Includes MagSlider lid.",
                            Name = "Yeti Rambler 30 oz Tumbler",
                            Price = 34.990000000000002,
                            Quantity = 30
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            Description = "Double hammock for two people with 70D high-tenacity nylon taffeta construction. Features aluminum wiregate carabiners and triple interlocking stitching.",
                            Name = "ENO DoubleNest Hammock",
                            Price = 69.950000000000003,
                            Quantity = 35
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            Description = "Portable propane grill with 20,000 BTUs of cooking power. Features 285 square inches of grilling area, InstaStart ignition, and collapsible design.",
                            Name = "Coleman RoadTrip 285 Portable Stand-Up Propane Grill",
                            Price = 249.99000000000001,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Description = "Memoir by former First Lady Michelle Obama. Chronicles her life from childhood to her years in the White House.",
                            Name = "Becoming by Michelle Obama",
                            Price = 14.99,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            Description = "Bestselling psychological thriller novel by Alex Michaelides. Gripping storyline with unexpected twists.",
                            Name = "The Silent Patient by Alex Michaelides",
                            Price = 14.99,
                            Quantity = 105
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            Description = "Memoir by Tara Westover. Chronicles her journey from a survivalist family in Idaho to earning a PhD from Cambridge University.",
                            Name = "Educated by Tara Westover",
                            Price = 11.99,
                            Quantity = 110
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            Description = "Bestselling novel by Delia Owens. A mystery and coming-of-age story set in the marshes of North Carolina.",
                            Name = "Where the Crawdads Sing by Delia Owens",
                            Price = 9.9900000000000002,
                            Quantity = 115
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            Description = "Memoir by former President Barack Obama. Reflects on his early political career, presidency, and legacy.",
                            Name = "A Promised Land by Barack Obama",
                            Price = 22.989999999999998,
                            Quantity = 120
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.Cart", b =>
                {
                    b.HasOne("EcommerceSystem.DAL.Data.Models.Customer", "Cutomer")
                        .WithOne("Cart")
                        .HasForeignKey("EcommerceSystem.DAL.Data.Models.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cutomer");
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.CartItem", b =>
                {
                    b.HasOne("EcommerceSystem.DAL.Data.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceSystem.DAL.Data.Models.Product", "Product")
                        .WithMany("CartItem")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.Order", b =>
                {
                    b.HasOne("EcommerceSystem.DAL.Data.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.OrderItem", b =>
                {
                    b.HasOne("EcommerceSystem.DAL.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceSystem.DAL.Data.Models.Product", "Product")
                        .WithMany("OrderItem")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.Product", b =>
                {
                    b.HasOne("EcommerceSystem.DAL.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EcommerceSystem.DAL.Data.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EcommerceSystem.DAL.Data.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceSystem.DAL.Data.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EcommerceSystem.DAL.Data.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.Customer", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("EcommerceSystem.DAL.Data.Models.Product", b =>
                {
                    b.Navigation("CartItem");

                    b.Navigation("OrderItem");
                });
#pragma warning restore 612, 618
        }
    }
}
